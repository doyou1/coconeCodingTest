package dptest0509;

import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Stack;

class Queue<T>{
	
	//각각의 Node를 나타내는 내부 class
	class Node<T>{
		//현재 Node를 나타내는 변수
		private T data;
		//현재 Node 다음을 나타내는 변수
		private Node<T> next;
		
		public Node(T data) {
			this.data = data;
		}
	}
	
	//맨 앞 노드
	private Node<T> first;
	//맨 마지막 노드
	private Node<T> last;
	
	public void add(T item) {
		Node<T> t = new Node<T>(item);
		
		//마지막이 비어있지않으면, 
		//지금 입력받은  T를 마지막의 next로 지정
		if(last != null) {
			last.next = t;
		}
		//그 이후 last는 지금 입력받은 T가 됨
		last = t;
		
		//최초 add하는 경우 first와 last를 모두 동일하게
		if(first == null) {
			first = last;
		}
		
	}
	
	public T remove() {
		
		if(first == null) {
			throw new NoSuchElementException();
		}
		
		T data = first.data;
		first = first.next;
		
		if(first == null) {
			last = null;
		}
		
		return data;
	}
	
	public T peek() {
		if(first == null) {
			throw new NoSuchElementException();
		}
		
		return first.data;
	}
	
	public boolean isEmpty() {
		return first == null;
	}
}

class Graph{
	class Node{
		int data;
		LinkedList<Node> adjacent;
		boolean marked;
		Node(int data){
			this.data = data;
			this.marked = false;
			adjacent = new LinkedList<Node>();
		}
	}
	Node[] nodes;
	Graph(int size){
		nodes = new Node[size];
		for(int i = 0; i<size; i++) {
			nodes[i] = new Node(i);
		}
	}
	
	void addEdge(int i1, int i2) {
		Node n1 = nodes[i1];
		Node n2 = nodes[i2];
		
		if(!n1.adjacent.contains(n2)) {
			n1.adjacent.add(n2);
		}
		if(!n2.adjacent.contains(n1)) {
			n2.adjacent.add(n1);
		}
	}
	void dfs() {
		dfs();
	}
	void dfs(int index) {
		Node root = nodes[index];
		Stack<Node> stack = new Stack<Node>();
		stack.push(root);
		while(!stack.isEmpty()) {
			Node r = stack.pop();
			for(Node n : r.adjacent) {
				if(n.marked == false) {
					n.marked = true;
					stack.push(n);
				}
			}
			visit(r);
		}
	}
	
	void visit(Node n) {
		System.out.println(n.data + " : ");
	}
}


public class QueueTest0509 {

	//Queue : 선입선출 FIFO
	public static void main(String[] args) {
		
		Queue<Integer> q = new Queue<Integer>();
		q.add(1);
		q.add(2);
		q.add(3);
		q.add(4);
		
		System.out.println(q.remove());
		System.out.println(q.remove());
		System.out.println(q.peek());
		System.out.println(q.remove());
		System.out.println(q.isEmpty());
		System.out.println(q.remove());
		System.out.println(q.isEmpty());
	}
}
